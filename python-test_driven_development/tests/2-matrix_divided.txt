Tests for matrix_divided()
>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

>>> matrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided(matrix)
[[1, 2, 3], [4, 5, 6]]


>>> matrix_divided(matrix, -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]


>>> matrix_divided(matrix, 0.3)
[[3.33, 6.67, 10.0], [13.33, 16.67, 20.0]]

>>> matrix_divided(matrix, -0.3)
[[-3.33, -6.67, -10.0], [-13.33, -16.67, -20.0]]


>>> matrix_divided(matrix, "School")
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix_divided(matrix, None)
Traceback (most recent call last):
    ...
TypeError: div must be a number


>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero


>>> matrix_divided([[1, 2, 3], [4, 5]], 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2], [4, 5, 6]], 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size


>>> matrix_divided([[1, 2, 3], "School"], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, "3"], [4, 5, 6]], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided("School", 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(float("NaN"), 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(None, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(float("inf"), 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> matrix_divided(matrix, float("inf"))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]


>>> matrix_divided(matrix, float("NaN"))
[[nan, nan, nan], [nan, nan, nan]]
